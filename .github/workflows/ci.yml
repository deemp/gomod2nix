name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
    - '**.md'
  push:
    paths-ignore:
    - '**.md'
    branches:
      - master

jobs:
  # nixpkgs-fmt:
  #   runs-on: ubuntu-latest
  #   env:
  #     NIX_PATH: "nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz"
  #   steps:
  #   - uses: cachix/install-nix-action@V27
  #   - uses: actions/checkout@v4
  #   - name: Check format
  #     run: nix-shell --run 'nixpkgs-fmt --check .'

  # golangci-lint:
  #   runs-on: ubuntu-latest
  #   env:
  #     NIX_PATH: "nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz"
  #   steps:
  #   - uses: cachix/install-nix-action@V27
  #   - uses: actions/checkout@v4
  #   - name: Check format
  #     run: nix-shell --run 'golangci-lint run'

  # gomod2nix_toml:
  #   runs-on: ubuntu-latest
  #   env:
  #     NIX_PATH: "nixpkgs=https://github.com/NixOS/nixpkgs/archive/nixos-unstable.tar.gz"
  #   steps:
  #   - uses: cachix/install-nix-action@V27
  #   - uses: actions/checkout@v4
  #   - name: "Build gomod2nix"
  #     run: nix-shell --run "go build"
  #   - name: Run gomod2nix
  #     run: nix-shell --run gomod2nix
  #   - name: Check diff
  #     run: git diff --exit-code gomod2nix.toml

  list-jobs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@V27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - id: set-matrix
        run: |
          set -euo pipefail
          matrix="$(go run tests/run.go list | jq --raw-input --slurp -rcM '{attr: split("\n")[:-1], os: ["ubuntu-latest"]}')"
          echo "::set-output name=matrix::$matrix"

  builds:
    needs: list-jobs
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.list-jobs.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v27
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v5.2.1
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          gc-max-store-size-linux: 1073741824
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ runner.os }}-
          # created more than this number of seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never
      - name: "Build gomod2nix"
        run: nix-shell --run "go build"
      - name: "Run test: ${{ matrix.attr }}"
        run: nix-shell --run "go run tests/run.go run ${{ matrix.attr }}"
